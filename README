AnonChat is a p2p messaging application based on jTorChat. Application has been modified for extra security and the addition of OTR messaging protocol and SMP (Socialist Millionaire Protocol) Updated to latest Tor binary and other security improvement.

	
Design Goals
=============
p2p (decentralized)
encrypted
anonymous (for everyone else, except the peers itself)
hides who communicates with whom
hides physical location
registration free (auto id generation)
Authentication
*Deniability
Perfect forward secrecy


Transport
===========
Uses TCP sockets to hidden services running on a specified port.
Peers send and receive messages on that TCP socket.


Connections
================
Hidden services behave like regular server sockets except that the server has no idea who (in the sense of IP source address) the client is because it is a tor client. As AnonChat is p2p, it needs to make out-bound connections to send messages and allow in-bound connections to receive messages from other peers.


Out-Bound Connections
======================
Connections to AnonChat peers are out-bound and are authenticated by definition as only the owner of the hidden service key is able to respond to the connection attempt.


In-Bound Connections
=====================
Connections from other AnonChat peers are always unauthenticated except they can prove in some way that they are who they pretend to be. AnonChat uses an session token for each peer to authenticate their connection and only then we can believe the claimed origin of the messages we receive on that in-bound connection.


Message Format
===============
type: byte array
message separator: 0x0a (LF)
decode as string:
`replace '\r\n' with '\n' then '\n' with "\n" (LF)`


Command Format
=================
command: a-z or _
seperator: 0x20 (SP)
payload: byte array

Example:
ping <payload>


Message Commands
===================
payload: <origin_hidden_service_id><separator><authentication_cookie>
<origin_hidden_service_id> is the hash of the public key used in the onion network (also known as onion address). This is the address the peer needs to contact to return the authentication_cookie. This way the origin knows on which in-bound connection the peer sits on as the authentication_cookie was only sent to a single hidden service.

<authentication_cookie> is a string of no specific length, but should be 7-bit-only to avoid charset conversion issues.

This authentication cookie has to be unique, cryptographically random and kept secret! If this token leaks, anyone can impersonate the identity of that AnonChat peer as long as the AnonChat application which generated this token runs.

Example:

ping mb4bc4jk4cj2fky4 31754944747097474078662100165902771331350515775810664422385852963171834014133

pong 31754944747097474078662100165902771331350515775810664422385852963171834014133
^ response command

Potential Security Issues / Weaknesses on Tor Hidden service
=============================================================

Hidden Services Guessing
-------------------------
Hidden services are stored on a DHT and can be iterated to find existing hidden services. As AnonChat uses a static port this can be used to find AnonChat users.

Authentication Tokens
-----------------------
The AnonChat client that wants to authenticate an hidden service hashkey (which is a chat buddy / peer in AnonChat) has to generate an authentication token that the chat peer needs to return. If the client selects a weak token, say a pretty short one or one without real random data, then the token could be guessed and you could send spoofed AnonChat messages that look like they are coming from the authenticated peer.

Stolen Private_key
-------------------
If the private key of a client is stolen, the client can fully impersonate the original owner.

Compromised Rendezvous point
-----------------------------
A compromised rendezvous point can be used to sniff out messages from AnonChat.


Solution
===============
Implementation of off-the-record messaging (OTR) 

Encryption: No one else can read your instant messages.

Authentication: You are assured the correspondent is who you think it is. SMP prevent MITM attacks.

Deniability: The messages you send do not have digital signatures that are checkable by a third party. Anyone can forge messages after a conversation to make them look like they came from you. However, during a conversation, your correspondent is assured the messages he sees are authentic and unmodified.

Perfect forward secrecy: If you lose control of your private keys, no previous conversation is compromised.
